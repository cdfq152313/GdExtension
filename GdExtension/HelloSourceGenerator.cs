using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace GdExtension
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new ObjectSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // if (
            //     !(context.SyntaxContextReceiver is ObjectSyntaxReceiver syntaxReceiver)
            //     || syntaxReceiver.MyClassSyntax == null
            // )
            // {
            //     return;
            // }
            //
            // var classSyntax = syntaxReceiver.MyClassSyntax;
            // // Find the main method
            //
            // // Build up the source code
            // string source =
            //     $@"// <auto-generated/>
            // using Godot;
            //
            //     public partial class {classSyntax.Identifier}
            //     {{
            //         partial void HelloFrom(string name) =>
            //             GD.Print($""Generator says: Hi from '{{name}}'"");
            //     }}
            // ";
            // // Add the source code to the compilation
            // context.AddSource($"{classSyntax.Identifier}.g.cs", source);

            context.AddSource(
                "myGeneratedFile.g.cs",
                @"
using Godot;
public class GeneratedClass
{
    public static void GeneratedMethod()
    {
        GD.Print(""Hello Generated"");
    }
}
"
            );
        }
    }
}